{
  "name": "relationship-care-platform",
  "version": "1.0.0",
  "description": "AI-powered relationship management platform for insurance agents",
  "main": "dist/server.js",
  "scripts": {
    "dev": "nodemon src/server.ts",
    "build": "tsc",
    "start": "node dist/server.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:comprehensive": "ts-node src/test/testRunner.ts",
    "test:unit": "jest --testPathPattern=\"src/test\" --testPathIgnorePatterns=\"integration|e2e|load|chaos|security\" --coverage",
    "test:integration": "jest --testPathPattern=\"src/test/integration\" --testTimeout=60000",
    "test:performance": "jest --testPathPattern=\"src/test/performance\" --testTimeout=45000",
    "test:load": "jest --testPathPattern=\"src/test/load\" --testTimeout=120000",
    "test:security": "jest --testPathPattern=\"src/test/security\" --testTimeout=60000",
    "test:chaos": "jest --testPathPattern=\"src/test/chaos\" --testTimeout=90000",
    "test:e2e": "jest --testPathPattern=\"src/test/e2e\" --testTimeout=180000",
    "test:coverage": "jest --coverage --coverageReporters=text --coverageReporters=html",
    "test:auth": "ts-node src/test/auth.test-runner.ts",
    "test:auth:unit": "jest --testPathPattern=\"auth.*test\\.ts$\" --verbose",
    "test:auth:integration": "jest --testPathPattern=\"integration.*auth\" --verbose",
    "test:auth:security": "jest --testPathPattern=\"security.*auth\" --verbose",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "setup:dev": "node scripts/setup-dev-db.js",
    "db:status": "node -e \"require('./src/services/database').DatabaseService.getConfigSummary(); console.log('Database configuration loaded successfully')\"",
    "db:validate": "node -e \"const result = require('./src/services/database').DatabaseService.validateConfiguration(); console.log('Validation result:', result)\"",
    "db:init": "ts-node src/scripts/initializeDatabase.ts",
    "db:reset": "ts-node src/scripts/resetDatabase.ts",
    "db:health": "ts-node src/scripts/databaseHealthCheck.ts",
    "db:migrate": "node -e \"const { DatabaseService } = require('./src/services/database/DatabaseService'); const db = new DatabaseService(); db.initialize().then(() => db.runMigrations()).then(() => db.close()).catch(console.error)\"",
    "db:inspect": "ts-node src/scripts/databaseInspector.ts",
    "db:inspect:table": "ts-node src/scripts/databaseInspector.ts table",
    "db:inspect:json": "ts-node src/scripts/databaseInspector.ts json",
    "db:test-connection": "node -e \"const { DatabaseService } = require('./src/services/database'); DatabaseService.initialize().then(() => DatabaseService.query('SELECT 1')).then(() => console.log('✅ Database connection successful')).catch(err => { console.error('❌ Database connection failed:', err.message); process.exit(1); }).finally(() => DatabaseService.close())\"",
    "db:verify-migrations": "ts-node src/scripts/verifyMigrations.ts",
    "migrate": "ts-node src/scripts/runMigration.ts",
    "migrate:default-admin": "ts-node src/scripts/runMigration.ts default-admin",
    "migrate:custom-admin": "ts-node src/scripts/runMigration.ts custom-admin",
    "migrate:validate": "ts-node src/scripts/runMigration.ts validate",
    "migrate:complete": "ts-node src/scripts/runMigration.ts complete",
    "migrate:cleanup-tokens": "ts-node src/scripts/runMigration.ts cleanup-tokens",
    "migrate:status": "ts-node src/scripts/runMigration.ts status",
    "migrate:report": "ts-node src/scripts/runMigration.ts report",
    "migrate:preflight": "ts-node src/scripts/runMigration.ts preflight",
    "verify:performance": "ts-node src/scripts/verifyPerformanceRequirements.ts",
    "performance:optimize": "ts-node -e \"const { DatabaseOptimizer } = require('./src/services/performance/databaseOptimizer'); const optimizer = new DatabaseOptimizer(); optimizer.updateTableStatistics().then(() => console.log('Database optimization complete')).catch(console.error)\"",
    "docker:dev": "docker-compose -f docker-compose.dev.yml up -d",
    "docker:dev:redis-only": "docker-compose -f docker-compose.dev.yml up -d redis",
    "docker:dev:postgres": "docker-compose -f docker-compose.dev.yml --profile postgres up -d",
    "docker:dev:full": "docker-compose -f docker-compose.dev.yml --profile full up -d",
    "docker:stop": "docker-compose down"
  },
  "keywords": [
    "insurance",
    "crm",
    "ai",
    "relationship-management"
  ],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@anthropic-ai/sdk": "^0.65.0",
    "@supabase/supabase-js": "^2.57.4",
    "@types/amqplib": "^0.10.7",
    "@types/imap": "^0.8.42",
    "@types/nodemailer": "^7.0.1",
    "@types/nunjucks": "^3.2.6",
    "@types/simple-oauth2": "^5.0.7",
    "@types/speakeasy": "^2.0.10",
    "@types/twilio": "^3.19.3",
    "amqplib": "^0.10.9",
    "axios": "^1.12.2",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "form-data": "^4.0.0",
    "helmet": "^7.1.0",
    "imap": "^0.8.19",
    "ioredis": "^5.7.0",
    "joi": "^17.11.0",
    "jsonwebtoken": "^8.5.1",
    "langchain": "^0.2.0",
    "multer": "^1.4.5-lts.1",
    "node-cron": "^3.0.3",
    "node-fetch": "^3.3.2",
    "nodemailer": "^7.0.6",
    "nunjucks": "^3.2.4",
    "oauth2-server": "^3.1.1",
    "pg": "^8.11.3",
    "puppeteer": "^24.19.0",
    "redis": "^4.6.10",
    "simple-oauth2": "^5.1.0",
    "smtp-server": "^3.14.0",
    "socket.io": "^4.7.5",
    "speakeasy": "^2.0.0",
    "twilio": "^5.9.0",
    "uuid": "^9.0.1",
    "winston": "^3.11.0",
    "ws": "^8.14.2"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/ioredis": "^5.0.0",
    "@types/jest": "^29.5.8",
    "@types/jsonwebtoken": "^8.5.9",
    "@types/multer": "^1.4.11",
    "@types/node": "^20.10.4",
    "@types/node-cron": "^3.0.11",
    "@types/node-fetch": "^2.6.13",
    "@types/pg": "^8.10.9",
    "@types/supertest": "^6.0.3",
    "@types/uuid": "^9.0.8",
    "@types/ws": "^8.5.10",
    "@typescript-eslint/eslint-plugin": "^6.13.1",
    "@typescript-eslint/parser": "^6.13.1",
    "eslint": "^8.54.0",
    "jest": "^29.7.0",
    "jest-html-reporters": "^3.1.7",
    "nodemon": "^3.0.2",
    "socket.io-client": "^4.8.1",
    "supertest": "^7.1.4",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "typescript": "^5.3.3"
  }
}
